{"version":3,"sources":["redux/constants.js","redux/reducers.js","redux/actions.js","components/app-message.js","marvel-api.js","components/search-panel.js","components/results-panel.js","components/single-result-panel.js","App.js","serviceWorker.js","index.js"],"names":["ActionTypes","SHOW_SEARCH_PAGE","SHOW_SINGLE_RESULT_PAGE","RENDER_SEARCH_RESULTS","CLEAR_SEARCH_RESULTS","FETCH_RESULTS","SHOW_MESSAGE","HIDE_MESSAGE","initialState","message","searchText","currentComic","currentSearchResults","showSingleSearchPage","comic","type","showMessage","text","level","AppMessage","this","props","hide","msg","color","react_default","a","createElement","reactstrap_es","isOpen","toggle","onDismiss","React","Component","AppMessageContainer","connect","state","dispatch","baseUrl","apiKey","privKey","Api","ts","Date","now","hash","md5","query","concat","fetch","then","response","json","id","SearchPanel","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","textInput","createRef","comp","md","style","marginBottom","name","placeholder","innerRef","onClick","doSearch","current","value","SearchPanelContainer","fetchResults","fetchBySearchText","results","data","length","console","log","renderSearchResults","warn","Comic","_ref","marginTop","cursor","images","top","width","src","path","extension","title","ComicsRow","_ref2","rowData","map","index","results_panel_Comic","key","ResultsPanel","fluid","paddingLeft","reduce","push","results_panel_ComicsRow","onComicClick","ResultsPanelContainer","fetchById","SingleResultPanel","fmtDate","date","toLocaleDateString","formatDate","dates","offset","size","showSearch","renderHTML","description","SingleResultPanelContainer","store","createStore","arguments","undefined","action","objectSpread","applyMiddleware","thunkMiddleware","createLogger","App","es","paddingTop","paddingBottom","backgroundColor","app_message","search_panel","results_panel","single_result_panel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aad33642.chunk.js","sourcesContent":["/**\r\n * Object containing all Redux actions.\r\n */\r\nexport const ActionTypes = {\r\n    SHOW_SEARCH_PAGE:        \"SHOW_SEARCH_PAGE\",\r\n    SHOW_SINGLE_RESULT_PAGE: \"SHOW_SINGLE_RESULT_PAGE\",\r\n    RENDER_SEARCH_RESULTS:   \"RENDER_SEARCH_RESULTS\",\r\n    CLEAR_SEARCH_RESULTS:    \"CLEAR_SEARCH_RESULTS\",\r\n    FETCH_RESULTS:           \"FETCH_RESULTS\",\r\n    SHOW_MESSAGE:            \"SHOW_MESSAGE\",\r\n    HIDE_MESSAGE:            \"HIDE_MESSAGE\"\r\n};\r\n\r\nexport default ActionTypes;","import {ActionTypes} from \"./constants\";\r\n\r\nconst initialState = {\r\n    // message: { text, level }\r\n    message: null,\r\n    searchText: null,\r\n    currentComic: null,\r\n    currentSearchResults: []\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SHOW_SEARCH_PAGE:\r\n            return {\r\n                ...state,\r\n                message: null,\r\n                currentComic: null\r\n            };\r\n        case ActionTypes.SHOW_SINGLE_RESULT_PAGE:\r\n            return {\r\n                ...state,\r\n                message: null,\r\n                currentComic: action.comic\r\n            };\r\n        case ActionTypes.RENDER_SEARCH_RESULTS:\r\n            return {\r\n                ...state,\r\n                message: null,\r\n                currentSearchResults: action.results || []\r\n            };\r\n        case ActionTypes.CLEAR_SEARCH_RESULTS:\r\n            return {\r\n                ...state,\r\n                message: null,\r\n                currentSearchResults: []\r\n            };\r\n        case ActionTypes.FETCH_RESULTS:\r\n            return {\r\n                ...state,\r\n                message: null,\r\n                searchText: action.searchText\r\n            };\r\n        case ActionTypes.SHOW_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: {\r\n                    text: action.text,\r\n                    level: action.level\r\n                }\r\n            };\r\n        case ActionTypes.HIDE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import {ActionTypes} from \"./constants\";\r\n\r\n/**\r\n * Action used to display the initial page with search text input box.\r\n *\r\n * @return {{type: string}}\r\n */\r\nexport const showSearchPage = () => (\r\n    {\r\n        type: ActionTypes.SHOW_SEARCH_PAGE\r\n    }\r\n);\r\n\r\n/**\r\n * Action used to display the page with details of a single comic from search results.\r\n *\r\n * @param comic    comic data to display\r\n * @return {{type: string, comic: *}}\r\n */\r\nexport const showSingleSearchPage = (comic) => (\r\n    {\r\n        type: ActionTypes.SHOW_SINGLE_RESULT_PAGE,\r\n        comic\r\n    }\r\n);\r\n\r\n/**\r\n * Action used to render the results of a search.\r\n *\r\n * @param results   array of objects containing comic data\r\n * @return {{type: string, results: *}}\r\n */\r\nexport const renderSearchResults = (results) => (\r\n    {\r\n        type: ActionTypes.RENDER_SEARCH_RESULTS,\r\n        results\r\n    }\r\n);\r\n\r\n/**\r\n * Action used to clear the currently rendered comic search results.\r\n *\r\n * @return {{type: string}}\r\n */\r\nexport const clearSearchResults = () => (\r\n    {\r\n        type: ActionTypes.CLEAR_SEARCH_RESULTS\r\n    }\r\n);\r\n\r\n/**\r\n * Action used to trigger fetch of search results based on search text.\r\n *\r\n * @param searchText    text to search on\r\n * @return {{type: string, searchText: *}}\r\n */\r\nexport const fetchResults = (searchText) => (\r\n    {\r\n        type: ActionTypes.FETCH_RESULTS,\r\n        searchText\r\n    }\r\n);\r\n\r\n/**\r\n * Action used to display alert box.\r\n *\r\n * @param text  text to display\r\n * @param level level of alert\r\n * @return {{type: string, text: *, level: *}}\r\n */\r\nexport const showMessage = (text, level) => (\r\n    {\r\n        type: ActionTypes.SHOW_MESSAGE,\r\n        text,\r\n        level\r\n    }\r\n);\r\n\r\n/**\r\n * Hides alert box.\r\n *\r\n * @return {{type: string}}\r\n */\r\nexport const hideMessage = () => (\r\n    {\r\n        type: ActionTypes.HIDE_MESSAGE\r\n    }\r\n);\r\n","import {connect}     from \"react-redux\"\r\nimport React         from 'react';\r\nimport {Alert}       from 'reactstrap';\r\nimport {hideMessage} from \"../redux/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n    hide:    !state.message,\r\n    message: state.message\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDismiss() {\r\n        dispatch(hideMessage());\r\n    }\r\n});\r\n\r\n/**\r\n * Component used to render alert box in app for info/error messages.\r\n */\r\nclass AppMessage extends React.Component {\r\n    render() {\r\n        if (this.props.hide) {\r\n            return null;\r\n        }\r\n\r\n        const\r\n            props = this.props,\r\n            msg   = props.message,\r\n            text  = msg.text,\r\n            color = msg.level\r\n        ;\r\n\r\n        return (\r\n            <Alert color={color} isOpen={true} toggle={props.onDismiss}>\r\n                {text}\r\n            </Alert>\r\n        );\r\n    }\r\n}\r\n\r\nconst AppMessageContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AppMessage);\r\n\r\nexport default AppMessageContainer;\r\n","import md5 from \"md5\";\r\n\r\n//TODO using server-side API auth while doing local dev - must white-list calling domain for client-side use\r\nconst\r\n    baseUrl = \"https://gateway.marvel.com\",\r\n    apiKey  = \"191e309068f42c22cf8dac1c9cd641bc\",\r\n    privKey = \"fed2207163bd43631090d34ca64eaaa65e74c23e\"\r\n;\r\n\r\nconst Api = {};\r\n\r\n/**\r\n * Executes search against API for full text search of comic titles.\r\n *\r\n * @param text comic title search text\r\n * @return {Promise<Response | never>}\r\n */\r\nApi.fetchBySearchText = (text) => {\r\n    const\r\n        ts    = Date.now(),\r\n        hash  = md5(ts + privKey + apiKey),\r\n        query = `${baseUrl}/v1/public/comics?ts=${ts}&apikey=${apiKey}&hash=${hash}&title=${text}`,\r\n        opts  = {}\r\n    ;\r\n    return fetch(query, opts).then(response => response.json());\r\n};\r\n\r\n/**\r\n * Executes search for single comic by id.\r\n *\r\n * @param id    id of comic\r\n * @return {Promise<Response | never>}\r\n */\r\nApi.fetchById = (id) => {\r\n    const\r\n        ts    = Date.now(),\r\n        hash  = md5(ts + privKey + apiKey),\r\n        query = `${baseUrl}/v1/public/comics/${id}?ts=${ts}&apikey=${apiKey}&hash=${hash}`,\r\n        opts  = {}\r\n    ;\r\n    return fetch(query, opts).then(response => response.json());\r\n};\r\n\r\nexport default Api;","import {connect}                                        from \"react-redux\"\r\nimport React                                            from 'react';\r\nimport {Button, Col, Input, Row}                        from 'reactstrap';\r\nimport {fetchResults, renderSearchResults, showMessage} from \"../redux/actions\";\r\nimport Api                                              from \"../marvel-api\";\r\n\r\nconst mapStateToProps = state => ({\r\n    hide: !!state.currentComic\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    doSearch(searchText) {\r\n        if (!searchText) {\r\n            dispatch(showMessage(\"You must enter search text\", \"danger\"));\r\n            return;\r\n        }\r\n        //TODO disable button, show Ajax loader\r\n        dispatch(fetchResults(searchText));\r\n        Api.fetchBySearchText(searchText).then((results) => {\r\n            if (results.data) {\r\n                const comics = results.data.results;\r\n                if (comics.length === 0) {\r\n                    dispatch(showMessage(\"No results were returned for search text: \" + searchText, \"warning\"));\r\n                } else {\r\n                    console.log(\"Results: \", results.data.results);\r\n                    dispatch(renderSearchResults(results.data.results));\r\n                }\r\n            } else {\r\n                dispatch(showMessage(\"An error has occurred\", \"danger\")); //TODO obtain API error\r\n                console.warn(\"No Results: \", results);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * Component used to render search input box and button\r\n */\r\nclass SearchPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.textInput = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        const\r\n            comp     = this,\r\n            props    = comp.props,\r\n            onSearch = () => {\r\n                props.doSearch(comp.textInput.current.value);\r\n            }\r\n        ;\r\n\r\n        if (props.hide) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Row>\r\n                <Col md={10} style={{marginBottom: \"10px\"}}>\r\n                    <Input type=\"text\" name=\"searchText\" id=\"searchText\" placeholder=\"Search Comics By Title\" innerRef={this.textInput}/>\r\n                </Col>\r\n                <Col md={2}>\r\n                    <Button onClick={onSearch}>Search</Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nconst SearchPanelContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchPanel);\r\n\r\nexport default SearchPanelContainer;\r\n","import {connect}                                                from \"react-redux\"\r\nimport React                                                    from 'react';\r\nimport {Card, CardBody, CardImg, CardText, Col, Container, Row} from 'reactstrap';\r\nimport {showSingleSearchPage}                                   from \"../redux/actions\";\r\nimport Api                                                      from \"../marvel-api\";\r\n\r\nconst mapStateToProps = state => ({\r\n    hide:    state.currentSearchResults.length === 0 || !!state.currentComic,\r\n    results: state.currentSearchResults\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onComicClick(id) {\r\n        Api.fetchById(id).then((results) => {\r\n            if (results.data.results.length === 0) {\r\n                dispatch(showSingleSearchPage(null));\r\n            } else {\r\n                console.log(\"Single result: \", results.data.results[0]);\r\n                dispatch(showSingleSearchPage(results.data.results[0]));\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// grid rendering taken and adapted from: https://stackoverflow.com/questions/36268705/react-jsx-conditional-wrapper-for-bootstrap-grid\r\nconst Comic = ({comic, onClick}) => (\r\n    <Col md={4} style={{marginTop: \"10px\"}}>\r\n        <Card style={{cursor: \"pointer\"}}>\r\n            {\r\n                comic.images && comic.images.length > 0 &&\r\n                <CardImg top width={\"100%\"} src={comic.images[0].path + \".\" + comic.images[0].extension} onClick={() => onClick(comic.id)}/>\r\n            }\r\n            {\r\n                comic.images && comic.images.length === 0 &&\r\n                <CardBody onClick={() => onClick(comic.id)}>\r\n                    <CardText>{comic.title}</CardText>\r\n                </CardBody>\r\n            }\r\n        </Card>\r\n    </Col>\r\n);\r\n\r\nconst ComicsRow = ({rowData, onClick}) => (\r\n    <Row style={{marginTop: \"10px\"}}>\r\n        {\r\n            rowData.map((comic, index) => (\r\n                <Comic key={index} comic={comic} onClick={onClick}/>\r\n            ))\r\n        }\r\n    </Row>\r\n);\r\n\r\n/**\r\n * Component used to redner grid of search results.\r\n */\r\nclass ResultsPanel extends React.Component {\r\n    render() {\r\n        const\r\n            comp    = this,\r\n            props   = comp.props,\r\n            results = props.results\r\n        ;\r\n\r\n        if (props.hide) {\r\n            return null;\r\n        }\r\n        return (\r\n            <Row style={{marginBottom: \"10px\"}}>\r\n                <Col>\r\n                    <Container fluid={true} style={{paddingLeft: 0}}>\r\n                        {\r\n                            results.reduce((rowData, comic, index) => {\r\n                                if (index % 3 === 0) {\r\n                                    rowData.push([]);\r\n                                }\r\n                                rowData[rowData.length - 1].push(comic);\r\n                                return rowData;\r\n                            }, []).map((rowData, index) => (\r\n                                <ComicsRow key={index} rowData={rowData} onClick={props.onComicClick}/>\r\n                            ))\r\n                        }\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nconst ResultsPanelContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ResultsPanel);\r\n\r\nexport default ResultsPanelContainer;\r\n\r\n","import {connect}                                                                                 from \"react-redux\"\r\nimport React                                                                                     from 'react';\r\nimport {Button, Card, CardBody, CardImg, CardSubtitle, CardText, CardTitle, Col, Container, Row} from 'reactstrap';\r\nimport {showSearchPage}                                                                          from \"../redux/actions\";\r\nimport renderHTML                                                                                from 'react-render-html';\r\n\r\nconst mapStateToProps = state => ({\r\n    hide:  !state.currentComic,\r\n    comic: state.currentComic\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    showSearch() {\r\n        dispatch(showSearchPage());\r\n    }\r\n});\r\n\r\nconst formatDate = (date) => {\r\n    if (!date) {\r\n        return \"\";\r\n    }\r\n    console.log(\"Date: \", date);\r\n    /** @type {Date} */\r\n    const dateObj = new Date(date.date);\r\n    return dateObj.toLocaleDateString();\r\n};\r\n\r\n/**\r\n * Component used to render detailed single comic result.\r\n */\r\nclass SingleResultPanel extends React.Component {\r\n    render() {\r\n\r\n        if (this.props.hide) {\r\n            return null;\r\n        }\r\n        const\r\n            props   = this.props,\r\n            comic   = props.comic,\r\n            src     = comic.images && comic.images.length > 0 ? comic.images[0].path + \".\" + comic.images[0].extension : null,\r\n            date    = comic.dates && comic.dates.length > 0 ? comic.dates[0] : null,\r\n            fmtDate = formatDate(date)\r\n        ;\r\n\r\n\r\n        return (\r\n            <Row style={{marginBottom: \"10px\"}}>\r\n                <Container>\r\n                    <Row>\r\n                        <Col md={{offset: 10, size: 2}} style={{marginBottom: \"20px\"}}>\r\n                            <Button onClick={props.showSearch}>Back to Results</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={{size: 6, offset: 3}}>\r\n                            <Card>\r\n                                {src &&\r\n                                <CardImg top width={\"100%\"} src={src}>\r\n\r\n                                </CardImg>\r\n                                }\r\n                                {!src &&\r\n                                <CardBody>\r\n                                    <CardTitle>{comic.title}</CardTitle>\r\n                                </CardBody>\r\n                                }\r\n                                <CardBody>\r\n                                    <CardTitle style={{marginBottom: \"15px\"}}>{comic.title}</CardTitle>\r\n                                    <CardSubtitle>{renderHTML(comic.description || \"\")}</CardSubtitle>\r\n                                    {fmtDate &&\r\n                                    <CardText style={{marginTop: \"5px\"}}><strong>Published:</strong> {fmtDate}</CardText>\r\n                                    }\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nconst SingleResultPanelContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SingleResultPanel);\r\n\r\nexport default SingleResultPanelContainer;\r\n","import React, {Component}             from 'react';\nimport {Col, Container, Row}          from 'reactstrap';\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider}                     from \"react-redux\";\nimport {createLogger}                 from \"redux-logger\";\nimport thunkMiddleware                from \"redux-thunk\";\nimport reducer                        from \"./redux/reducers\";\nimport AppMessage                     from \"./components/app-message\";\nimport SearchPanel                    from \"./components/search-panel\";\nimport ResultsPanel                   from \"./components/results-panel\";\nimport SingleResultPanel              from \"./components/single-result-panel\";\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(\n        thunkMiddleware,\n        createLogger()\n    )\n);\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Container fluid={true}>\n                    <Row style={{paddingTop: \"20px\", paddingBottom: \"10px\", marginBottom: \"30px\", backgroundColor: \"#444444\", color: \"#FFFFFF\"}}>\n                        <Col>\n                            <h3>Marvel Comics Search App</h3>\n                            <h6>Search 1000s of Marvel Comic titles</h6>\n                        </Col>\n                    </Row>\n\n                    <Container>\n                        <AppMessage/>\n                        <SearchPanel/>\n                        <ResultsPanel/>\n                        <SingleResultPanel/>\n\n                    </Container>\n                </Container>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}